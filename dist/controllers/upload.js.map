{"version":3,"sources":["../src/controllers/upload.ts"],"names":["exports","default","uploadRoute","fastify_multer_1","__importDefault","require","path_1","fs_1","mime","fastify","yield","register","Promise","resolve","then","__importStar","storage","diskStorage","destination","req","file","cb","filename","_ext","extname","originalname","Date","now","upload","uploadFix","fileFilter","mimetype","Error","limits","fileSize","get","request","reply","__awaiter","this","data","post","preHandler","single","size","mysql","fastifyBasic","getConnection","query","send","message","array","files","connection","insertedFiles","filePath","result","push","id","insertId","fileName","params","join","_mimetype","lookup","fileData","readFileSync","header","delete","length","file_name","existsSync","unlinkSync","status","error","release"],"mappings":"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","file":"upload.js","sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from \"fastify\";\r\nimport multer from \"fastify-multer\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nconst mime = require(\"mime-types\");\r\n\r\nexport default async function uploadRoute(fastify: FastifyInstance) {\r\n  await fastify.register(import(\"@fastify/multipart\"));\r\n\r\n  const storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n      cb(null, \"uploads/\");\r\n    },\r\n    filename: function (req, file, cb) {\r\n      const _ext = path.extname(file.originalname);\r\n      const filename = `${Date.now()}${_ext}`;\r\n      cb(null, filename);\r\n    },\r\n  });\r\n  const upload = multer({ storage });\r\n  const uploadFix = multer({\r\n    storage,\r\n    fileFilter: function (req, file, cb) {\r\n      if (file.mimetype !== \"image/*\") {\r\n        return cb(new Error(\"Only PNG files are allowed\"), false);\r\n      }\r\n      cb(null, true);\r\n    },\r\n    limits: {\r\n      fileSize: 10 * 1024 * 1024, // 10MB\r\n    },\r\n  });\r\n\r\n  fastify.get(\"/\", async (request: FastifyRequest, reply: FastifyReply) => {\r\n    return { data: \"upload ready\" };\r\n  });\r\n\r\n  fastify.post(\r\n    \"/file\",\r\n    {\r\n      preHandler: upload.single(\"file\"),\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const file = request.file as any;\r\n\r\n      const { originalname, filename, mimetype, size } = file;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n\r\n      const query = `\r\n        INSERT INTO files (file_origianalname, file_name, mimetype, size, file_path) \r\n        VALUES (?, ?, ?, ?, ?)`;\r\n      await connection.query(query, [\r\n        originalname,\r\n        filename,\r\n        mimetype,\r\n        size,\r\n        \"http://127.0.0.1:8000/uploads/\" + filename,\r\n      ]);\r\n      return reply.send({\r\n        message: \"File uploaded successfully\",\r\n        data: file,\r\n      });\r\n    }\r\n  );\r\n\r\n  fastify.post(\r\n    \"/files\",\r\n    {\r\n      preHandler: upload.array(\"file\", 4),\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const files = request.files as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n\r\n      const query = `\r\n        INSERT INTO files (file_origianalname, file_name, mimetype, size, file_path) \r\n        VALUES (?, ?, ?, ?, ?)`;\r\n      const insertedFiles = [];\r\n\r\n      for (const file of files) {\r\n        const { originalname, filename, mimetype, size } = file;\r\n        const filePath = `http://127.0.0.1:8000/uploads/${filename}`;\r\n\r\n        const [result] = await connection.query(query, [\r\n          originalname,\r\n          filename,\r\n          mimetype,\r\n          size,\r\n          filePath,\r\n        ]);\r\n\r\n        insertedFiles.push({\r\n          id: (result as any).insertId,\r\n          originalname,\r\n          filename,\r\n          mimetype,\r\n          size,\r\n          filePath,\r\n        });\r\n      }\r\n\r\n      return reply.send({\r\n        message: \"Files uploaded successfully\",\r\n        data: insertedFiles,\r\n      });\r\n    }\r\n  );\r\n  fastify.post(\r\n    \"/fileFix\",\r\n    {\r\n      preHandler: uploadFix.single(\"file\"),\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const file = request.file as any;\r\n      return { data: file };\r\n    }\r\n  );\r\n\r\n  fastify.get(\r\n    \"/file/:fileName\",\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const param: any = request.params;\r\n      const fileName = param.fileName;\r\n      const filePath = path.join(\"uploads/\", fileName);\r\n      const _mimetype = mime.lookup(fileName);\r\n      const fileData = fs.readFileSync(filePath);\r\n      reply.header(\"Content-Type\", _mimetype);\r\n      reply.send(fileData);\r\n    }\r\n  );\r\n\r\n  fastify.delete(\r\n    \"/file/:id\",\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { id } = request.params as { id: string };\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n\r\n      try {\r\n        // Get file info from database\r\n        const [files] = await connection.query(\r\n          \"SELECT file_name FROM files WHERE file_id = ?\",\r\n          [id]\r\n        );\r\n\r\n        if (!files || (files as any[]).length === 0) {\r\n          return reply.status(404).send({\r\n            message: \"File not found\",\r\n          });\r\n        }\r\n\r\n        const fileName = (files as any[])[0].file_name;\r\n        const filePath = path.join(\"uploads/\", fileName);\r\n\r\n        // Delete file from filesystem\r\n        if (fs.existsSync(filePath)) {\r\n          fs.unlinkSync(filePath);\r\n        }\r\n\r\n        // Delete record from database\r\n        await connection.query(\"DELETE FROM files WHERE file_id = ?\", [id]);\r\n\r\n        return reply.send({\r\n          message: \"File deleted successfully\",\r\n          id: id,\r\n          fileName: fileName,\r\n        });\r\n      } catch (error) {\r\n        return reply.status(500).send({\r\n          message: \"Error deleting file\",\r\n          error: error,\r\n        });\r\n      } finally {\r\n        connection.release();\r\n      }\r\n    }\r\n  );\r\n}\r\n"]}