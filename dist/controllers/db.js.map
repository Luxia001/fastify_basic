{"version":3,"sources":["../src/controllers/db.ts"],"names":["exports","default","dbRoute","bcryptjs_1","__importDefault","require","fastify","get","request","reply","__awaiter","this","rows","yield","mysql","fastifyBasic","getConnection","query","data","imNight","post","schema","headers","params","body","type","required","properties","fristName","lastName","username","maxLength","password","minLength","connection","hashedPassword","hash","length","compare","token","jwt","sign","id","frist_name","last_name","preValidation","authenticate","put","delete"],"mappings":"sdAGAA,QAAAC,QAAAC,QAFA,IAAAC,WAAAC,gBAAAC,QAAA,UAAA,CAAA,EAEA,SAA8BH,QAAQI,G,gDACpCA,EAAQC,IACN,SACA,CAAOC,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,GAEM,CAACC,GAAQC,MAFIA,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,GAEjCC,MAAM,qBAAqB,EAC3D,MAAO,CAAEC,KAAMN,CAAI,CACrB,CAAC,CAAA,EAGHN,EAAQC,IACN,WACA,CAAOC,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,GACM,CAACC,GAAQC,MADIA,MAAMP,EAAQQ,MAAMK,QAAQH,cAAa,GAC5BC,MAAM,oBAAoB,EAC1D,MAAO,CAAEC,KAAMN,CAAI,CACrB,CAAC,CAAA,EAGHN,EAAQc,KACN,YACA,CACEC,OAAQ,CACNC,QAAS,GACTC,OAAQ,GACRN,MAAO,GACPO,KAAM,CACJC,KAAM,SACNC,SAAU,CAAC,YAAa,WAAY,WAAY,YAChDC,WAAY,CACVC,UAAW,CAAEH,KAAM,QAAQ,EAC3BI,SAAU,CAAEJ,KAAM,QAAQ,EAC1BK,SAAU,CAAEL,KAAM,SAAUM,UAAW,EAAE,EACzCC,SAAU,CAAEP,KAAM,SAAUQ,UAAW,CAAC,C,KAKhD,CAAOzB,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,GAAM,CAAEiB,UAAAA,EAAWC,SAAAA,EAAUC,SAAAA,EAAUE,SAAAA,CAAQ,EAAKxB,EAAQgB,KACtDU,EAAarB,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,EAG3DmB,EAAiBtB,MAAMV,WAAAF,QAAOmC,KAAKJ,EADtB,EAC0C,EAU7D,OANAnB,MAAMqB,EAAWjB,MADf,kFAC4B,CAC5BW,EACAC,EACAC,EACAK,EACD,EACM,CAAEjB,KAAM,kBAAkB,CACnC,CAAC,CAAA,EAGHZ,EAAQc,KACN,SACA,CACEC,OAAQ,CACNC,QAAS,GACTC,OAAQ,GACRN,MAAO,GACPO,KAAM,CACJC,KAAM,SACNC,SAAU,CAAC,WAAY,YACvBC,WAAY,CACVG,SAAU,CAAEL,KAAM,SAAUM,UAAW,EAAE,EACzCC,SAAU,CAAEP,KAAM,SAAUQ,UAAW,CAAC,C,KAKhD,CAAOzB,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,GAAM,CAAEmB,SAAAA,EAAUE,SAAAA,CAAQ,EAAKxB,EAAQgB,KAEjC,CAACZ,GAAQC,MADIA,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,GACjCC,MAC9B,yCACA,CAACa,EAAS,EAEZ,OAAoB,IAAhBlB,EAAKyB,OACA,CAAEnB,KAAM,gBAAgB,GAETL,MAAMV,WAAAF,QAAOqC,QAAQN,EAAUpB,EAAK,GAAGoB,QAAQ,GAShE,CAAEd,KAAM,gBAAiBqB,MALlBjC,EAAQkC,IAAIC,KAAK,CAC7BC,GAAI9B,EAAK,GAAG8B,GACZd,UAAWhB,EAAK,GAAG+B,WACnBd,SAAUjB,EAAK,GAAGgC,S,CACnB,CAC2C,EAPnC,CAAE1B,KAAM,oBAAoB,CAQvC,CAAC,CAAA,EAGHZ,EAAQC,IACN,eACA,CACEsC,cAAe,CAACvC,EAAQwC,a,EAE1B,CAAOtC,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,IAAQ+B,EAAOlC,EAAQe,OAAb,GAEJ,CAACX,GAAQC,MADIA,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,GACjCC,MAC9B,mCACA,CAACyB,EAAG,EAEN,MAAO,CAAExB,KAAMN,EAAK,EAAE,CACxB,CAAC,CAAA,EAGHN,EAAQyC,IACN,cACA,CACE1B,OAAQ,CACNC,QAAS,GACTC,OAAQ,GACRN,MAAO,GACPO,KAAM,CACJC,KAAM,SACNC,SAAU,CAAC,MACXC,WAAY,CACVe,GAAI,CAAEjB,KAAM,SAAS,EACrBG,UAAW,CAAEH,KAAM,QAAQ,EAC3BI,SAAU,CAAEJ,KAAM,QAAQ,EAC1BK,SAAU,CAAEL,KAAM,SAAUM,UAAW,EAAE,EACzCC,SAAU,CAAEP,KAAM,SAAUQ,UAAW,CAAC,C,KAKhD,CAAOzB,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,GAAM,CAAE+B,GAAAA,EAAId,UAAAA,EAAWC,SAAAA,EAAUC,SAAAA,EAAUE,SAAAA,CAAQ,EACjDxB,EAAQgB,KACJU,EAAarB,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,EAI3DmB,EAAiBtB,MAAMV,WAAAF,QAAOmC,KAAKJ,EADtB,EAC0C,EAQ7D,OAPAnB,MAAMqB,EAAWjB,MAHf,oFAG4B,CAC5BW,EACAC,EACAC,EACAK,EACAO,EACD,EACM,CAAExB,KAAM,gBAAgB,CACjC,CAAC,CAAA,EAGHZ,EAAQ0C,OACN,kBACA,CACE3B,OAAQ,CACNC,QAAS,GACTC,OAAQ,CACNE,KAAM,SACNC,SAAU,CAAC,MACXC,WAAY,CACVe,GAAI,CAAEjB,KAAM,SAAS,C,GAGzBR,MAAO,GACPO,KAAM,E,GAGV,CAAOhB,EAAyBC,IAAuBC,UAAAC,KAAA,KAAA,EAAA,KAAA,EAAA,YACrD,IAAQ+B,EAAOlC,EAAQe,OAAb,GAIV,OADAV,MAFmBA,MAAMP,EAAQQ,MAAMC,aAAaC,cAAa,GAEhDC,MADH,iCACgB,CAACyB,EAAG,EAC3B,CAAExB,KAAM,gBAAgB,CACjC,CAAC,CAAA,CAEL,CAAC,C","file":"db.js","sourcesContent":["import { FastifyInstance, FastifyRequest, FastifyReply } from \"fastify\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport default async function dbRoute(fastify: FastifyInstance) {\r\n  fastify.get(\r\n    \"/users\",\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n\r\n      const [rows] = await connection.query(\"SELECT * FROM users\");\r\n      return { data: rows };\r\n    }\r\n  );\r\n\r\n  fastify.get(\r\n    \"/imnight\",\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const connection = await fastify.mysql.imNight.getConnection();\r\n      const [rows] = await connection.query(\"SELECT * FROM menu\");\r\n      return { data: rows };\r\n    }\r\n  );\r\n\r\n  fastify.post(\r\n    \"/register\",\r\n    {\r\n      schema: {\r\n        headers: {},\r\n        params: {},\r\n        query: {},\r\n        body: {\r\n          type: \"object\",\r\n          required: [\"fristName\", \"lastName\", \"username\", \"password\"],\r\n          properties: {\r\n            fristName: { type: \"string\" },\r\n            lastName: { type: \"string\" },\r\n            username: { type: \"string\", maxLength: 20 },\r\n            password: { type: \"string\", minLength: 6 },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { fristName, lastName, username, password } = request.body as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n\r\n      const saltRounds = 10;\r\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n      const query =\r\n        \"INSERT INTO users (frist_name,last_name,username, password) VALUES (?, ?, ?, ?)\";\r\n      await connection.query(query, [\r\n        fristName,\r\n        lastName,\r\n        username,\r\n        hashedPassword,\r\n      ]);\r\n      return { data: \"register success\" };\r\n    }\r\n  );\r\n\r\n  fastify.post(\r\n    \"/login\",\r\n    {\r\n      schema: {\r\n        headers: {},\r\n        params: {},\r\n        query: {},\r\n        body: {\r\n          type: \"object\",\r\n          required: [\"username\", \"password\"],\r\n          properties: {\r\n            username: { type: \"string\", maxLength: 20 },\r\n            password: { type: \"string\", minLength: 6 },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { username, password } = request.body as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n      const [rows] = await connection.query(\r\n        \"SELECT * FROM users WHERE username = ?\",\r\n        [username]\r\n      );\r\n      if (rows.length === 0) {\r\n        return { data: \"user not found\" };\r\n      }\r\n      const isPasswordMatch = await bcrypt.compare(password, rows[0].password);\r\n      if (!isPasswordMatch) {\r\n        return { data: \"password not match\" };\r\n      }\r\n      const token = fastify.jwt.sign({\r\n        id: rows[0].id,\r\n        fristName: rows[0].frist_name,\r\n        lastName: rows[0].last_name,\r\n      });\r\n      return { data: \"login success\", token: token };\r\n    }\r\n  );\r\n\r\n  fastify.get(\r\n    \"/getUser/:id\",\r\n    {\r\n      preValidation: [fastify.authenticate],\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { id } = request.params as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n      const [rows] = await connection.query(\r\n        \"SELECT * FROM users WHERE id = ?\",\r\n        [id]\r\n      );\r\n      return { data: rows[0] };\r\n    }\r\n  );\r\n\r\n  fastify.put(\r\n    \"/updateUser\",\r\n    {\r\n      schema: {\r\n        headers: {},\r\n        params: {},\r\n        query: {},\r\n        body: {\r\n          type: \"object\",\r\n          required: [\"id\"],\r\n          properties: {\r\n            id: { type: \"integer\" },\r\n            fristName: { type: \"string\" },\r\n            lastName: { type: \"string\" },\r\n            username: { type: \"string\", maxLength: 20 },\r\n            password: { type: \"string\", minLength: 6 },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { id, fristName, lastName, username, password } =\r\n        request.body as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n      const query =\r\n        \"UPDATE users SET frist_name = ?, last_name = ?,username=?,password=? WHERE id = ?\";\r\n      const saltRounds = 10;\r\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n      await connection.query(query, [\r\n        fristName,\r\n        lastName,\r\n        username,\r\n        hashedPassword,\r\n        id,\r\n      ]);\r\n      return { data: \"update success\" };\r\n    }\r\n  );\r\n\r\n  fastify.delete(\r\n    \"/deleteUser/:id\",\r\n    {\r\n      schema: {\r\n        headers: {},\r\n        params: {\r\n          type: \"object\",\r\n          required: [\"id\"],\r\n          properties: {\r\n            id: { type: \"integer\" },\r\n          },\r\n        },\r\n        query: {},\r\n        body: {},\r\n      },\r\n    },\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      const { id } = request.params as any;\r\n      const connection = await fastify.mysql.fastifyBasic.getConnection();\r\n      const query = \"DELETE FROM users WHERE id = ?\";\r\n      await connection.query(query, [id]);\r\n      return { data: \"delete success\" };\r\n    }\r\n  );\r\n}\r\n"]}